--- C:\Users\thesi\GitLab\nabucco\run\.\exec\0\0\original\out\C\LdS\Stazione\src\Logica\ClasseLDS_SubClass_C2.c
+++ C:\Users\thesi\GitLab\nabucco\run\.\exec\0\0\mutations\condizioni-lista\out\C\LdS\Stazione\src\Logica\ClasseLDS_SubClass_C2.c
@@ -887,10 +887,40 @@
     
     { commento: {[}
-     commento: {46,} assegna alla macro il valore RossoGiallo commento: {],}
+      	 commento: {[} commento: {34,}  se il parametro LDS_SubClass_C2_parametro_P4 non è  diverso da c120x,  commento: {43,}   se LDS_MainClass_C1_timer_T8 del campo LDS_MainClass_C1  di LDS_SubClass_C2_lista_L1 esiste e  commento: {105,} è attivo, commento: {88,} quando  commento: {41,}   LDS_MainClass_C1_parametro_P2 del campo LDS_MainClass_C1      commento: {105,} è  uguale a  commento: {53,} 5 , assegna alla macro il valore RossoGiallo    assegna alla macro il valore RossoGiallo 
     }
 */
 C2_Enumerat1 L_P1__Macro10(instance_id_t const my_id , C2_Enumerat1 argom8, bool argom9, C2_Enumerat1 argom10, C2_Enumerat4 argom11)
 {
-return rossogiallo1;
+C2_Enumerat1 res_macro_val;
+    
+    //  *[*
+    //    	 *[* *34,*  se il parametro LDS_SubClass_C2_parametro_P4 non è  diverso da c120x,  *43,*   se LDS_MainClass_C1_timer_T8 del campo LDS_MainClass_C1  di LDS_SubClass_C2_lista_L1 esiste e  *105,* è attivo, *88,* quando  *41,*   LDS_MainClass_C1_parametro_P2 del campo LDS_MainClass_C1      *105,* è  uguale a  *53,* 5
+    bool res_AndLogicOP_0 = true;
+    bool res_NotLogicOP_1 = true;
+    bool res_NotLogicOP_2 = true;
+    res_NotLogicOP_2 = (res_NotLogicOP_2 && ! (L_P1__GetParamLds_s11(my_id) == c120x));
+    res_NotLogicOP_1 = (res_NotLogicOP_1 && ! res_NotLogicOP_2);
+    res_AndLogicOP_0 = (res_AndLogicOP_0 && res_NotLogicOP_1);
+    bool res_ForAllPredicateNotEmpty_3 = false;
+    for (index_t i = 0; i < L_P1__GetParamLds_s8Length(my_id); ++i)
+    {
+    const L_P1__Recor * it = L_P1__GetRecLds_s8(my_id,i);
+    bool res_ImpliesLogicOp_4 = true;
+    if((L_P1__GetParamLds_m7(it->lds_m20) == 5u)){
+    res_ImpliesLogicOp_4 = (res_ImpliesLogicOp_4 && Timer_Attivo(L_P1__GetLds_m15(it->lds_m20)));
+    res_ForAllPredicateNotEmpty_3 = res_ImpliesLogicOp_4;
+    if(!res_ForAllPredicateNotEmpty_3) {break;}
+    }
+    }
+    res_AndLogicOP_0 = (res_AndLogicOP_0 && res_ForAllPredicateNotEmpty_3);
+    
+    if(res_AndLogicOP_0){
+    
+    res_macro_val = rossogiallo1;
+    }
+    else{
+    res_macro_val = rossogiallo1;
+    }
+    return res_macro_val;
 }
 
